@inherits BlazorKitComponentBase
@using BlazorKit.Util

@inject Microsoft.JSInterop.IJSRuntime JSRuntime

@if (IsOpen)
{
    <DynamicElement Id="@Id" Attributes="@UnknownParameters" TagName="div" class="@classname" role="tooltip" onclick="@onclick">
        <div ref="arrow" class="arrow"></div>
        @ChildContent
    </DynamicElement>
}

@functions {
    private ElementRef arrow;
    private string classname
    {
        get
        {
            var open = IsOpen ? "show" : null;
            var placement = $"bs-popover-{Placement.GetValue<Placement>()}";
            return $"popover {placement} {open} {Class}";
        }
    }
    [Parameter] private bool IsOpen { get; set; }
    protected override void OnAfterRender()
    {
        if (IsOpen)
        {
            var placement = Placement.GetValue<Placement>();
            new BlazorKitInterop(JSRuntime).Popper(Target, Id, arrow, placement);
        }
    }
    private string Id
    {
        get
        {
            return Target + "-popover";
        }
    }
    [Parameter] private Placement Placement { get; set; } = Placement.Auto;
    [Parameter] private string Target { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private string Style { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }

    private void onclick()
    {
        IsOpen = false;
    }
}