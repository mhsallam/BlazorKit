@inherits BlazorKit.BlazorKitComponentBase
@using BlazorKit
@using BlazorKit.Util
@using Microsoft.AspNetCore.Components

<DynamicElement TagName="@Tag" onclick="@onclick" type="@type" class="@classname" disabled="@disabled" role="button" tabindex="@tab" value="@Value" Attributes="@UnknownParameters">
  @ChildContent
</DynamicElement>

@functions {
  private string classname
  {
    get
    {
      var buttonStyle = Color != ButtonColor.None ? $"uk-button-{Color.ToString().ToLower()}" : null;
      var size = Size != BaseSize.None ? $"uk-button-{Size.ToString().ToLower()}" : null;
      var width = Width ?? $"uk-width-{Width}";
      return Type != ButtonType.Close ? $"uk-button {buttonStyle} {size} {width} {Class}" : Class;
    }
  }
  private string Tag { get; set; } = "button";
  private string disabled
  {
    get
    {
      return IsDisabled ? "true" : null;
    }
  }
  private string tab
  {
    get
    {
      return IsDisabled ? "-1" : null;
    }
  }
  private string type
  {
    get
    {
      switch (Type)
      {
        case ButtonType.Input:
        case ButtonType.Close:
        case ButtonType.Button:
          return "button";
        case ButtonType.Submit:
          return "submit";
        case ButtonType.Reset:
          return "reset";
        default:
          return null;
      }
    }
  }

  [Parameter] private Action<UIMouseEventArgs> onclick { get; set; }
  [Parameter] private ButtonColor Color { get; set; } = ButtonColor.Default;
  [Parameter] private BaseSize Size { get; set; } = BaseSize.None;
  [Parameter] private string Width { get; set; }
  [Parameter] private string Value { get; set; }
  [Parameter] private bool IsDisabled { get; set; }

  private ButtonType _buttonType = ButtonType.Button;
  [Parameter]
  private ButtonType Type
  {
    get
    {
      return _buttonType;
    }
    set
    {
      _buttonType = value;
      switch (_buttonType)
      {
        case ButtonType.Button:
          Tag = "button";
          break;
        case ButtonType.Link:
          Tag = "a";
          break;
        case ButtonType.Input:
        case ButtonType.Submit:
        case ButtonType.Reset:
        case ButtonType.Radio:
        case ButtonType.Checkbox:
          Tag = "input";
          break;
        case ButtonType.Close:
          UnknownParameters.Add("uk-close", true);
          Tag = "button";
          break;
        default:
          Tag = "button";
          break;
      }

      if (_buttonType != ButtonType.Close)
      {
        UnknownParameters.Remove("uk-close");
      }
    }
  }

  [Parameter] private string Class { get; set; }
  [Parameter] private RenderFragment ChildContent { get; set; }
}